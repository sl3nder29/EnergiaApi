name: CI/CD - EnergiaApi

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*'     # Exemplo: v1.0.0 -> ativa deploy de produ√ß√£o
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CONTAINER_NAME: energiaapi
  STAGING_PORT: 8080
  PRODUCTION_PORT: 80

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: üì¶ Checkout do reposit√≥rio
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Configurar .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: üß© Restaurar depend√™ncias
        run: dotnet restore

      - name: üèóÔ∏è Build da aplica√ß√£o
        run: dotnet build --configuration Release --no-restore

      - name: üß™ Run tests (skip if no test project)
        run: |
          if ls **/*Tests.csproj 1> /dev/null 2>&1; then
            dotnet test --no-build --verbosity normal
          else
            echo "Nenhum projeto de teste encontrado. Pulando etapa de testes."
          fi

      - name: üê≥ Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Login no GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è Gerar metadados da imagem
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: üß± Build e Push da imagem Docker (Staging)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
          labels: ${{ steps.meta.outputs.labels }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: üöÄ Deploy autom√°tico no ambiente STAGING
        run: |
          echo "Deploy no ambiente STAGING iniciado..."
          echo "Executando container com porta ${STAGING_PORT}"
          docker run -d -p ${STAGING_PORT}:80 \
            -e ASPNETCORE_ENVIRONMENT=Staging \
            --name ${{ env.CONTAINER_NAME }}-staging \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
          echo "‚úÖ Deploy Staging conclu√≠do."

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: üöÄ Deploy autom√°tico no ambiente PRODU√á√ÉO
        run: |
          echo "Deploy no ambiente PRODU√á√ÉO iniciado..."
          echo "Executando container com porta ${PRODUCTION_PORT}"
          docker run -d -p ${PRODUCTION_PORT}:80 \
            -e ASPNETCORE_ENVIRONMENT=Production \
            --name ${{ env.CONTAINER_NAME }}-prod \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
          echo "‚úÖ Deploy Produ√ß√£o conclu√≠do."
